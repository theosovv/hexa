// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: impulses.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createImpulse = `-- name: CreateImpulse :one
INSERT INTO reverb_impulses (
  user_id, track_id, filename, file_size, s3_key, mime_type
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at
`

type CreateImpulseParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	TrackID  pgtype.UUID `json:"track_id"`
	Filename string      `json:"filename"`
	FileSize int64       `json:"file_size"`
	S3Key    string      `json:"s3_key"`
	MimeType pgtype.Text `json:"mime_type"`
}

func (q *Queries) CreateImpulse(ctx context.Context, arg CreateImpulseParams) (ReverbImpulse, error) {
	row := q.db.QueryRow(ctx, createImpulse,
		arg.UserID,
		arg.TrackID,
		arg.Filename,
		arg.FileSize,
		arg.S3Key,
		arg.MimeType,
	)
	var i ReverbImpulse
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteImpulse = `-- name: DeleteImpulse :exec
DELETE FROM reverb_impulses
WHERE id = $1 AND user_id = $2
`

type DeleteImpulseParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteImpulse(ctx context.Context, arg DeleteImpulseParams) error {
	_, err := q.db.Exec(ctx, deleteImpulse, arg.ID, arg.UserID)
	return err
}

const getImpulse = `-- name: GetImpulse :one
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM reverb_impulses
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetImpulse(ctx context.Context, id uuid.UUID) (ReverbImpulse, error) {
	row := q.db.QueryRow(ctx, getImpulse, id)
	var i ReverbImpulse
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const getUserImpulse = `-- name: GetUserImpulse :one
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM reverb_impulses
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetUserImpulseParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetUserImpulse(ctx context.Context, arg GetUserImpulseParams) (ReverbImpulse, error) {
	row := q.db.QueryRow(ctx, getUserImpulse, arg.ID, arg.UserID)
	var i ReverbImpulse
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const listTrackImpulses = `-- name: ListTrackImpulses :many
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM reverb_impulses
WHERE track_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTrackImpulses(ctx context.Context, trackID pgtype.UUID) ([]ReverbImpulse, error) {
	rows, err := q.db.Query(ctx, listTrackImpulses, trackID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReverbImpulse
	for rows.Next() {
		var i ReverbImpulse
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrackID,
			&i.Filename,
			&i.FileSize,
			&i.S3Key,
			&i.MimeType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
