// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tracks.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createTrack = `-- name: CreateTrack :one
INSERT INTO tracks (
  user_id, title, description, bpm, graph_data
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, user_id, title, description, is_public, bpm, graph_data, created_at, updated_at
`

type CreateTrackParams struct {
	UserID      uuid.NullUUID   `json:"user_id"`
	Title       string          `json:"title"`
	Description sql.NullString  `json:"description"`
	Bpm         sql.NullInt32   `json:"bpm"`
	GraphData   json.RawMessage `json:"graph_data"`
}

func (q *Queries) CreateTrack(ctx context.Context, arg CreateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, createTrack,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.Bpm,
		arg.GraphData,
	)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Bpm,
		&i.GraphData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTrack = `-- name: DeleteTrack :exec
DELETE FROM tracks
WHERE id = $1
`

func (q *Queries) DeleteTrack(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTrack, id)
	return err
}

const getPublicTrack = `-- name: GetPublicTrack :one
SELECT id, user_id, title, description, is_public, bpm, graph_data, created_at, updated_at FROM tracks
WHERE id = $1 AND is_public = true
LIMIT 1
`

func (q *Queries) GetPublicTrack(ctx context.Context, id uuid.UUID) (Track, error) {
	row := q.db.QueryRowContext(ctx, getPublicTrack, id)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Bpm,
		&i.GraphData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTrack = `-- name: GetTrack :one
SELECT id, user_id, title, description, is_public, bpm, graph_data, created_at, updated_at FROM tracks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrack(ctx context.Context, id uuid.UUID) (Track, error) {
	row := q.db.QueryRowContext(ctx, getTrack, id)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Bpm,
		&i.GraphData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserTracks = `-- name: ListUserTracks :many
SELECT id, user_id, title, description, is_public, bpm, graph_data, created_at, updated_at FROM tracks
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserTracks(ctx context.Context, userID uuid.NullUUID) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, listUserTracks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.IsPublic,
			&i.Bpm,
			&i.GraphData,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrack = `-- name: UpdateTrack :one
UPDATE tracks
SET title = $2, description = $3, bpm = $4, graph_data = $5, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, description, is_public, bpm, graph_data, created_at, updated_at
`

type UpdateTrackParams struct {
	ID          uuid.UUID       `json:"id"`
	Title       string          `json:"title"`
	Description sql.NullString  `json:"description"`
	Bpm         sql.NullInt32   `json:"bpm"`
	GraphData   json.RawMessage `json:"graph_data"`
}

func (q *Queries) UpdateTrack(ctx context.Context, arg UpdateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, updateTrack,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Bpm,
		arg.GraphData,
	)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Bpm,
		&i.GraphData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
