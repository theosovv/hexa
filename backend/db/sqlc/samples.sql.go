// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: samples.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSample = `-- name: CreateSample :one
INSERT INTO samples (
  user_id, track_id, filename, file_size, s3_key, mime_type
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at
`

type CreateSampleParams struct {
	UserID   pgtype.UUID `json:"user_id"`
	TrackID  pgtype.UUID `json:"track_id"`
	Filename string      `json:"filename"`
	FileSize int64       `json:"file_size"`
	S3Key    string      `json:"s3_key"`
	MimeType pgtype.Text `json:"mime_type"`
}

func (q *Queries) CreateSample(ctx context.Context, arg CreateSampleParams) (Sample, error) {
	row := q.db.QueryRow(ctx, createSample,
		arg.UserID,
		arg.TrackID,
		arg.Filename,
		arg.FileSize,
		arg.S3Key,
		arg.MimeType,
	)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSample = `-- name: DeleteSample :exec
DELETE FROM samples
WHERE id = $1 AND user_id = $2
`

type DeleteSampleParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) DeleteSample(ctx context.Context, arg DeleteSampleParams) error {
	_, err := q.db.Exec(ctx, deleteSample, arg.ID, arg.UserID)
	return err
}

const deleteTrackSamples = `-- name: DeleteTrackSamples :exec
DELETE FROM samples
WHERE track_id = $1
`

func (q *Queries) DeleteTrackSamples(ctx context.Context, trackID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTrackSamples, trackID)
	return err
}

const getSample = `-- name: GetSample :one
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM samples
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSample(ctx context.Context, id uuid.UUID) (Sample, error) {
	row := q.db.QueryRow(ctx, getSample, id)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const getUserSample = `-- name: GetUserSample :one
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM samples
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetUserSampleParams struct {
	ID     uuid.UUID   `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetUserSample(ctx context.Context, arg GetUserSampleParams) (Sample, error) {
	row := q.db.QueryRow(ctx, getUserSample, arg.ID, arg.UserID)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TrackID,
		&i.Filename,
		&i.FileSize,
		&i.S3Key,
		&i.MimeType,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTotalStorage = `-- name: GetUserTotalStorage :one
SELECT COALESCE(SUM(file_size), 0) as total_size
FROM samples
WHERE user_id = $1
`

func (q *Queries) GetUserTotalStorage(ctx context.Context, userID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getUserTotalStorage, userID)
	var total_size interface{}
	err := row.Scan(&total_size)
	return total_size, err
}

const listTrackSamples = `-- name: ListTrackSamples :many
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM samples
WHERE track_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListTrackSamples(ctx context.Context, trackID pgtype.UUID) ([]Sample, error) {
	rows, err := q.db.Query(ctx, listTrackSamples, trackID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sample
	for rows.Next() {
		var i Sample
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrackID,
			&i.Filename,
			&i.FileSize,
			&i.S3Key,
			&i.MimeType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserSamples = `-- name: ListUserSamples :many
SELECT id, user_id, track_id, filename, file_size, s3_key, mime_type, created_at FROM samples
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserSamplesParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListUserSamples(ctx context.Context, arg ListUserSamplesParams) ([]Sample, error) {
	rows, err := q.db.Query(ctx, listUserSamples, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sample
	for rows.Next() {
		var i Sample
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TrackID,
			&i.Filename,
			&i.FileSize,
			&i.S3Key,
			&i.MimeType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
