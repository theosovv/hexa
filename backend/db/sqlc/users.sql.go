// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, display_name, avatar_url, oauth_provider, oauth_id
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, display_name, avatar_url, oauth_provider, oauth_id, storage_used, storage_limit, created_at, updated_at
`

type CreateUserParams struct {
	Email         string         `json:"email"`
	DisplayName   sql.NullString `json:"display_name"`
	AvatarUrl     sql.NullString `json:"avatar_url"`
	OauthProvider string         `json:"oauth_provider"`
	OauthID       string         `json:"oauth_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.OauthProvider,
		arg.OauthID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.OauthProvider,
		&i.OauthID,
		&i.StorageUsed,
		&i.StorageLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, display_name, avatar_url, oauth_provider, oauth_id, storage_used, storage_limit, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.OauthProvider,
		&i.OauthID,
		&i.StorageUsed,
		&i.StorageLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, display_name, avatar_url, oauth_provider, oauth_id, storage_used, storage_limit, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.OauthProvider,
		&i.OauthID,
		&i.StorageUsed,
		&i.StorageLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_name = $2, avatar_url = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, email, display_name, avatar_url, oauth_provider, oauth_id, storage_used, storage_limit, created_at, updated_at
`

type UpdateUserParams struct {
	ID          uuid.UUID      `json:"id"`
	DisplayName sql.NullString `json:"display_name"`
	AvatarUrl   sql.NullString `json:"avatar_url"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.DisplayName, arg.AvatarUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.OauthProvider,
		&i.OauthID,
		&i.StorageUsed,
		&i.StorageLimit,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
